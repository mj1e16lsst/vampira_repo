tempDict = {'imshow': [['X', ' cmap', ' norm', ' aspect', ' interpolation', ' alpha', '\n           vmin', ' vmax', ' origin', ' extent', ' shape', '\n           filternorm', ' filterrad', ' imlim', ' resample', ' url', '\n           hold', ' data', ' **kwargs'], ['ret']], 'hexbin': [['x', ' y', ' C', ' gridsize', ' bins', ' xscale', '\n           yscale', ' extent', ' cmap', ' norm', ' vmin', '\n           vmax', ' alpha', ' linewidths', ' edgecolors', '\n           reduce_C_function', ' mincnt', ' marginals', ' hold', '\n           data', ' **kwargs'], ['ret']], 'triplot': [['*args', ' **kwargs'], ['ret']], 'xlim': [['*args', ' **kwargs'], ['ret']], 'show': [['*args', ' **kw'], ['_show(*args', ' **kw)']], 'savefig': [['*args', ' **kwargs'], ['res']], 'text': [['x', ' y', ' s', ' fontdict', ' withdash', ' **kwargs'], ['ret']], 'fill_between': [['x', ' y1', ' y2', ' where', ' interpolate', ' step', '\n                 hold', ' data', ' **kwargs'], ['ret']], 'fourierTransform': [['imageName', 'std'], ['fourierImageName']], 'get_plot_commands': [[''], ['sorted(commands)']], 'stackplot': [['x', ' *args', ' **kwargs'], ['ret']], 'figimage': [['*args', ' **kwargs'], ['gcf().figimage(*args', ' **kwargs)']], 'tricontourf': [['*args', ' **kwargs'], ['ret']], 'table': [['**kwargs'], ['ret']], 'cohere': [['x', ' y', ' NFFT', ' Fs', ' Fc', ' detrend', '\n           window', ' noverlap', ' pad_to', ' sides', '\n           scale_by_freq', ' hold', ' data', ' **kwargs'], ['ret']], 'xkcd': [['scale', ' length', ' randomness'], ['a dummy']], 'ticklabel_format': [['**kwargs'], ['ret']], 'contourf': [['*args', ' **kwargs'], ['ret']], 'plot': [['*args', ' **kwargs'], ['ret']], 'disconnect': [['cid'], ['get_current_fig_manager().canvas.mpl_disconnect(cid)']], 'title': [['s', ' *args', ' **kwargs'], ['gca().set_title(s', ' *args', ' **kwargs)']], 'get_current_fig_manager': [[''], ['figManager']], '__enter__': [['self'], ['dummy_ctx()']], 'axhline': [['y', ' xmin', ' xmax', ' hold', ' **kwargs'], ['ret']], 'cla': [[''], ['ret']], 'tick_params': [['axis', ' **kwargs'], ['ret']], 'xticks': [['*args', ' **kwargs'], ['locs', " silent_list('Text xticklabel'", ' labels)']], 'axhspan': [['ymin', ' ymax', ' xmin', ' xmax', ' hold', ' **kwargs'], ['ret']], 'subplot_tool': [['targetfig=None'], ['ret']], 'ylabel': [['s', ' *args', ' **kwargs'], ['gca().set_ylabel(s', ' *args', ' **kwargs)']], 'pad': [['s', ' l'], ["s + ' ' * (l - len(s))"]], 'pcolor': [['*args', ' **kwargs'], ['ret']], 'bdsf': [['imageName'], ['bdsf_table']], 'subplot': [['*args', ' **kwargs'], ['a']], 'vlines': [['x', ' ymin', ' ymax', ' colors', ' linestyles', ' label', ' hold', '\n           data', ' **kwargs'], ['ret']], 'suptitle': [['*args', ' **kwargs'], ['gcf().suptitle(*args', ' **kwargs)']], 'get_fignums': [[''], ['sorted(_pylab_helpers.Gcf.figs)']], 'ylim': [['*args', ' **kwargs'], ['ret']], 'hlines': [['y', ' xmin', ' xmax', ' colors', ' linestyles', ' label', ' hold', '\n           data', ' **kwargs'], ['ret']], 'thetagrids': [['*args', ' **kwargs'], ["(silent_list('Line2D thetagridline'", ' lines)', '']], 'psd': [['x', ' NFFT', ' Fs', ' Fc', ' detrend', ' window', '\n        noverlap', ' pad_to', ' sides', ' scale_by_freq', '\n        return_line', ' hold', ' data', ' **kwargs'], ['ret']], 'make_active': [['event'], ['figManager.canvas.figure']], 'grid': [['b', ' which', ' axis', ' **kwargs'], ['ret']], 'quiverkey': [['*args', ' **kw'], ['ret']], 'locator_params': [['axis', ' tight', ' **kwargs'], ['ret']], 'setp': [['*args', ' **kwargs'], ['_setp(*args', ' **kwargs)']], 'waitforbuttonpress': [['*args', ' **kwargs'], ['gcf().waitforbuttonpress(*args', ' **kwargs)']], 'annotate': [['*args', ' **kwargs'], ['ret']], 'bar': [['*args', ' **kwargs'], ['ret']], 'plot_date': [['x', ' y', ' fmt', ' tz', ' xdate', ' ydate', ' hold', '\n              data', ' **kwargs'], ['ret']], 'isinteractive': [[''], ['matplotlib.is_interactive()']], 'hist2d': [['x', ' y', ' bins', ' range', ' normed', ' weights', ' cmin', '\n           cmax', ' hold', ' data', ' **kwargs'], ['ret']], 'angle_spectrum': [['x', ' Fs', ' Fc', ' window', ' pad_to', ' sides', '\n                   hold', ' data', ' **kwargs'], ['ret']], 'colorbar': [['mappable', ' cax', ' ax', ' **kw'], ['ret']], 'fignum_exists': [['num'], ['_pylab_helpers.Gcf.has_fignum(num) or num in get_figlabels()']], 'pcolormesh': [['*args', ' **kwargs'], ['ret']], 'twiny': [['ax=None'], ['ax1']], 'arrow': [['x', ' y', ' dx', ' dy', ' hold', ' **kwargs'], ['ret']], 'figtext': [['*args', ' **kwargs'], ['gcf().text(*args', ' **kwargs)']], 'rc_context': [['rc', ' fname'], ['matplotlib.rc_context(rc', ' fname)']], 'scatter': [['x', ' y', ' s', ' c', ' marker', ' cmap', ' norm', ' vmin', '\n            vmax', ' alpha', ' linewidths', ' verts', ' edgecolors', '\n            hold', ' data', ' **kwargs'], ['ret']], 'xcorr': [['x', ' y', ' normed', ' detrend', ' usevlines', '\n          maxlags', ' hold', ' data', ' **kwargs'], ['ret']], 'spy': [['Z', ' precision', ' marker', ' markersize', ' aspect', ' **kwargs'], ['ret']], 'figlegend': [['*args', ' **kwargs'], ['gcf().legend(*args', ' **kwargs)']], 'quiver': [['*args', ' **kw'], ['ret']], 'findobj': [['o', ' match', ' include_self'], ['o.findobj(match', ' include_self']], 'specgram': [['x', ' NFFT', ' Fs', ' Fc', ' detrend', ' window', '\n             noverlap', ' cmap', ' xextent', ' pad_to', ' sides', '\n             scale_by_freq', ' mode', ' scale', ' vmin', ' vmax', '\n             hold', ' data', ' **kwargs'], ['ret']], 'pie': [['x', ' explode', ' labels', ' colors', ' autopct', '\n        pctdistance', ' shadow', ' labeldistance', ' startangle', '\n        radius', ' counterclock', ' wedgeprops', ' textprops', '\n        center', ' 0)', ' frame', ' rotatelabels', ' hold', ' data'], ['ret']], 'tricontour': [['*args', ' **kwargs'], ['ret']], 'ishold': [[''], ['gca()._hold']], 'connect': [['s', ' func'], ['get_current_fig_manager().canvas.mpl_connect(s', ' func)']], 'getname_val': [['identifier'], ['name', ' r[name]']], 'imread': [['*args', ' **kwargs'], ['_imread(*args', ' **kwargs)']], 'barh': [['*args', ' **kwargs'], ['ret']], 'matshow': [['A', ' fignum', ' **kw'], ['im']], 'contour': [['*args', ' **kwargs'], ['ret']], 'axis': [['*v', ' **kwargs'], ['gca().axis(*v', ' **kwargs)']], 'gca': [['**kwargs'], ['gcf().gca(**kwargs)']], 'autoscale': [['enable', ' axis', ' tight'], ['ret']], 'gcf': [[''], ['figure()']], 'margins': [['*args', ' **kw'], ['ret']], 'csd': [['x', ' y', ' NFFT', ' Fs', ' Fc', ' detrend', ' window', '\n        noverlap', ' pad_to', ' sides', ' scale_by_freq', '\n        return_line', ' hold', ' data', ' **kwargs'], ['ret']], 'axes': [['arg', ' **kwargs'], ['gcf().add_axes(rect', ' **kwargs)']], 'streamplot': [['x', ' y', ' u', ' v', ' density', ' linewidth', ' color', ' cmap', '\n               norm', ' arrowsize', ' arrowstyle', ' minlength', '\n               transform', ' zorder', ' start_points', ' maxlength', '\n               integration_direction', ' hold', ' data'], ['ret']], 'hist': [['x', ' bins', ' range', ' density', ' weights', ' cumulative', '\n         bottom', ' histtype', ' align', ' orientation', '\n         rwidth', ' log', ' color', ' label', ' stacked', '\n         normed', ' hold', ' data', ' **kwargs'], ['ret']], 'phase_spectrum': [['x', ' Fs', ' Fc', ' window', ' pad_to', ' sides', '\n                   hold', ' data', ' **kwargs'], ['ret']], 'violinplot': [['dataset', ' positions', ' vert', ' widths', ' showmeans', '\n               showextrema', ' showmedians', ' points', ' bw_method', '\n               hold', ' data'], ['ret']], 'clabel': [['CS', ' *args', ' **kwargs'], ['ret']], 'magnitude_spectrum': [['x', ' Fs', ' Fc', ' window', ' pad_to', '\n                       sides', ' scale', ' hold', ' data', ' **kwargs'], ['ret']], 'get_figlabels': [[''], ['[m.canvas.figure.get_label() for m in figManagers]']], 'xlabel': [['s', ' *args', ' **kwargs'], ['gca().set_xlabel(s', ' *args', ' **kwargs)']], 'axvline': [['x', ' ymin', ' ymax', ' hold', ' **kwargs'], ['ret']], 'fill': [['*args', ' **kwargs'], ['ret']], 'tripcolor': [['*args', ' **kwargs'], ['ret']], 'loglog': [['*args', ' **kwargs'], ['ret']], 'twinx': [['ax=None'], ['ax1']], 'polar': [['*args', ' **kwargs'], ['ret']], 'imsave': [['*args', ' **kwargs'], ['_imsave(*args', ' **kwargs)']], 'boxplot': [['x', ' notch', ' sym', ' vert', ' whis', ' positions', '\n            widths', ' patch_artist', ' bootstrap', ' usermedians', '\n            conf_intervals', ' meanline', ' showmeans', ' showcaps', '\n            showbox', ' showfliers', ' boxprops', ' labels', '\n            flierprops', ' medianprops', ' meanprops', ' capprops', '\n            whiskerprops', ' manage_xticks', ' autorange', ' zorder', '\n            hold', ' data'], ['ret']], 'acorr': [['x', ' hold', ' data', ' **kwargs'], ['ret']], 'errorbar': [['x', ' y', ' yerr', ' xerr', ' fmt', ' ecolor', ' elinewidth', '\n             capsize', ' barsabove', ' lolims', ' uplims', '\n             xlolims', ' xuplims', ' errorevery', ' capthick', '\n             hold', ' data', ' **kwargs'], ['ret']], 'stem': [['*args', ' **kwargs'], ['ret']], 'step': [['x', ' y', ' *args', ' **kwargs'], ['ret']], 'eventplot': [['positions', ' orientation', ' lineoffsets', ' linelengths', '\n              linewidths', ' colors', ' linestyles', ' hold', '\n              data', ' **kwargs'], ['ret']], 'rgrids': [['*args', ' **kwargs'], ["( silent_list('Line2D rgridline'", ' lines)', '']], 'legend': [['*args', ' **kwargs'], ['ret']], 'sextractor': [['imageName'], ['table']], 'subplot2grid': [['shape', ' loc', ' rowspan', ' colspan', ' fig', ' **kwargs'], ['a']], '_autogen_docstring': [['base'], ['an image or a line.']], 'fill_betweenx': [['y', ' x1', ' x2', ' where', ' step', ' interpolate', '\n                  hold', ' data', ' **kwargs'], ['ret']], 'axvspan': [['xmin', ' xmax', ' ymin', ' ymax', ' hold', ' **kwargs'], ['ret']], 'semilogx': [['*args', ' **kwargs'], ['ret']], 'semilogy': [['*args', ' **kwargs'], ['ret']], 'subplots': [['nrows', ' ncols', ' sharex', ' sharey', ' squeeze', '\n             subplot_kw', ' gridspec_kw', ' **fig_kw'], ['fig', ' axs']], 'gci': [[''], ['gcf()._gci()']], 'barbs': [['*args', ' **kw'], ['ret']], 'broken_barh': [['xranges', ' yrange', ' hold', ' data', ' **kwargs'], ['ret']], 'yticks': [['*args', ' **kwargs'], ['( locs', '']], 'colormaps': [[''], ['sorted(cm.cmap_d)']], 'generateHistogram': [['table', 'histogramName'], ['histogramName']], 'ginput': [['*args', ' **kwargs'], ['gcf().ginput(*args', ' **kwargs)']]}